[{"/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/index.js":"1","/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/App.js":"2","/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/Saved.js":"3","/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/Nav.js":"4","/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/PlaceList.js":"5","/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/LoginForm.js":"6","/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/SignupForm.js":"7","/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/Search.js":"8","/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/Place.js":"9","/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/utils/mutations.js":"10","/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/utils/auth.js":"11"},{"size":167,"mtime":1630376927926,"results":"12","hashOfConfig":"13"},{"size":1648,"mtime":1630376927904,"results":"14","hashOfConfig":"13"},{"size":1866,"mtime":1630383431561,"results":"15","hashOfConfig":"13"},{"size":562,"mtime":1630376927908,"results":"16","hashOfConfig":"13"},{"size":553,"mtime":1630376927916,"results":"17","hashOfConfig":"13"},{"size":2800,"mtime":1630376927907,"results":"18","hashOfConfig":"13"},{"size":3413,"mtime":1630376927921,"results":"19","hashOfConfig":"13"},{"size":7416,"mtime":1630376927920,"results":"20","hashOfConfig":"13"},{"size":831,"mtime":1630376927913,"results":"21","hashOfConfig":"13"},{"size":556,"mtime":1630376927933,"results":"22","hashOfConfig":"13"},{"size":806,"mtime":1630376927932,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"bockyv",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/index.js",[],["49","50"],"/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/App.js",["51","52","53"],"// We import useState and useEffect in our component\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport React, { useState, useEffect } from 'react';\nimport PlaceList from './components/PlaceList';\nimport Saved from './components/Saved';\nimport Search from './components/Search';\n// import Login from './components/Login';\nimport Nav from './components/Nav';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Login from './components/LoginForm';\nimport Signup from './components/SignupForm';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n\n  return (\n    <div>\n      <header><h1 style={{\n        backgoundColor: 'red',\n        color: 'green',\n        }}>Globe Traveller</h1></header>\n    <ApolloProvider client={client}>\n      <Router>\n        <Nav/>\n        <Switch>\n        <Route exact path=\"/\">\n          <Search />\n        </Route>\n        <Route exact path=\"/saved\">\n          <Saved />\n        </Route>\n        <Route exact path=\"/login\">\n          <Login />\n        </Route>\n        <Route exact path=\"/signup\">\n          <Signup />\n        </Route>\n        </Switch>\n      </Router>\n    </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/Saved.js",[],"/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/Nav.js",[],"/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/PlaceList.js",[],"/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/LoginForm.js",[],"/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/SignupForm.js",[],"/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/Search.js",["54"],"// We import useState and useEffect in our component\nimport React, { useState, useEffect } from 'react';\nimport PlaceList from './PlaceList';\n// import { BrowserRouter as Router, Route } from 'react-router-dom';\n\nfunction Search() {\n  // We declare a state variable that is an array called `issues` and a function to update it.\n  const [places, setPlaces] = useState([]);\n  const [formState, setFormState] = useState({\n    numCities: 3,\n    sort: '-population',\n    countries: '',\n    offset: 0,\n    \n  });\n\n  // Helper function that preforms an API request and sets the `issues` array to a list of issues from GitHub\n  const getPlaces = () => {\n    fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?limit=${formState.numCities}&sort=${formState.sort}${formState.countries}&minPopulation=1&offset=${formState.offset}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"wft-geo-db.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"9610a05b5amshd976184d69c9411p1b38bdjsn299a5e3639b6\"\n      }\n    })\n    .then(response => {\n      return response.json();\n    })\n    .then(res => {\n      console.log(res.data);\n      let cityList = res.data;\n      let cities = [];\n      for(let i=0; i<cityList.length+1; i++){\n        if(i===cityList.length){\n          setPlaces(cities);\n          return;\n        }\n        cities.push({\n          cityName: cityList[i].city,\n          region: cityList[i].region,\n          population: cityList[i].population,\n          longitude: cityList[i].longitude,\n          latitude: cityList[i].latitude,\n          cityId: cityList[i].id,\n        });\n      }\n\n    })\n    .catch(err => {\n      console.error(err);\n    });\n  };\n  const handleChange = (event) => {\n    const { value, name } = event.target;\n    console.log(value);\n    if(name==='numCities'){\n      setFormState({\n        ...formState,\n        numCities: value,\n      });\n    }\n    if(name==='country'){\n      if(name.length > 0){\n        setFormState({\n          ...formState,\n          countries: `&countryIds=${value}`,\n        });\n      }\n      else{\n        setFormState({\n          ...formState,\n          countries: ``,\n        });\n      }\n      \n    }\n    if(name==='offset'){\n\n      fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?limit=${formState.numCities}&sort=${formState.sort}${formState.countries}&minPopulation=1&offset=0`, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"wft-geo-db.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"9610a05b5amshd976184d69c9411p1b38bdjsn299a5e3639b6\"\n        }\n      })\n      .then(response => {\n        return response.json();\n      })\n      .then(res => {\n        let newOffset = res.metadata.totalCount;\n        let medOffset = Math.round(newOffset*0.6666);\n        let lowOffset = Math.round(newOffset*0.3333);\n        console.log(newOffset);\n        if(value==='low'){\n          // Math.random() * (max - min) + min;\n          //Math.random() * medOffset;\n          return Math.round(Math.random() * (lowOffset -1 - medOffset) + medOffset);\n          // return newOffset;\n        }\n        if(value === 'med'){\n          // newOffset = Math.round(newOffset*0.3333);\n          return Math.round(Math.random() * (lowOffset - medOffset) + medOffset);\n        }\n        if(value === 'high'){\n          // newOffset = 0;\n          return Math.round(Math.random() * (medOffset-1));\n        }\n        // console.log(newOffset);\n        \n        // console.log(formState.offset);\n      }).then(res => {\n        console.log('res',res);\n        setFormState({\n          ...formState,\n          offset: res,\n        });\n        console.log('offsett ',formState.offset)\n      })\n      .catch(err => {\n        console.error(err);\n      });\n\n\n\n      \n    }\n    \n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    document.querySelector('.header').setAttribute(\"style\", \"display: block\");\n    // if(formState.offset === 0){\n    //   let offset = document.querySelector('#offset').value;\n    //   await fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?limit=${formState.numCities}&sort=${formState.sort}${formState.countries}&minPopulation=1&offset=0`, {\n    //     \"method\": \"GET\",\n    //     \"headers\": {\n    //       \"x-rapidapi-host\": \"wft-geo-db.p.rapidapi.com\",\n    //       \"x-rapidapi-key\": \"9610a05b5amshd976184d69c9411p1b38bdjsn299a5e3639b6\"\n    //     }\n    //   })\n    //   .then(response => {\n    //     return response.json();\n    //   })\n    //   .then(res => {\n    //     let newOffset = res.metadata.totalCount;\n    //     let medOffset = Math.round(newOffset*0.6666);\n    //     let lowOffset = Math.round(newOffset*0.3333);\n    //     console.log(newOffset);\n    //     if(offset==='low'){\n    //       // Math.random() * (max - min) + min;\n    //       //Math.random() * medOffset;\n    //       return Math.round(Math.random() * (lowOffset -1 - medOffset) + medOffset);\n    //       // return newOffset;\n    //     }\n    //     if(offset === 'med'){\n    //       // newOffset = Math.round(newOffset*0.3333);\n    //       return Math.round(Math.random() * (lowOffset - medOffset) + medOffset);\n    //     }\n    //     if(offset === 'high'){\n    //       // newOffset = 0;\n    //       return Math.round(Math.random() * (medOffset-1));\n    //     }\n    //     // console.log(newOffset);\n        \n    //     // console.log(formState.offset);\n    //   }).then(res => {\n    //     console.log('res',res);\n    //     setFormState({\n    //       ...formState,\n    //       offset: res,\n    //     });\n    //     console.log('offsett ',formState.offset)\n    //     getPlaces();\n    //   })\n    //   .catch(err => {\n    //     console.error(err);\n    //   });\n    // }\n    // else{\n      getPlaces();\n    // }\n    // setTimeout(() => getPlaces(), 2000);\n    // getPlaces();\n  }\n\n  return (\n    <div>\n        <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Country\"\n                  name=\"country\"\n                  type=\"text\"\n                //   value={formState.numCities}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Number of Cities\"\n                  name=\"numCities\"\n                  type=\"text\"\n                //   value={formState.numCities}\n                  onChange={handleChange}\n                />\n\n                <label for=\"offset\">Population Level:  </label>\n\n                <select name=\"offset\" id=\"offset\" onChange={handleChange} style={{width:\"85px\"}}>\n                  <option value=\"high\">High</option>\n                  <option value=\"med\">Medium</option>\n                  <option value=\"low\">Low</option>\n                </select>\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n\n\n\n\n\n        <div className=\"container\">\n        <h1 className=\"header\" style={{display:\"none\"}}>Possible Destinations</h1>\n        <div className=\"ui grid\">\n            <div className=\"row\">\n            <div className=\"col-11\">\n                <PlaceList places={places}/>\n            </div>\n            </div>\n        </div>\n        </div>\n    </div>\n  );\n}\n\nexport default Search;\n","/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/components/Place.js",[],"/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/utils/mutations.js",[],"/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/utils/auth.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":9,"column":17,"nodeType":"61","messageId":"62","endLine":9,"endColumn":25},{"ruleId":"59","severity":1,"message":"63","line":9,"column":27,"nodeType":"61","messageId":"62","endLine":9,"endColumn":36},{"ruleId":"59","severity":1,"message":"64","line":10,"column":8,"nodeType":"61","messageId":"62","endLine":10,"endColumn":17},{"ruleId":"59","severity":1,"message":"63","line":2,"column":27,"nodeType":"61","messageId":"62","endLine":2,"endColumn":36},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'PlaceList' is defined but never used.","no-global-assign","no-unsafe-negation"]