{"ast":null,"code":"var _jsxFileName = \"/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/App.js\",\n    _s = $RefreshSig$();\n\n// We import useState and useEffect in our component\nimport React, { useState, useEffect } from 'react';\nimport PlaceList from './components/PlaceList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // We declare a state variable that is an array called `issues` and a function to update it.\n  const [places, setPlaces] = useState([]); // When the page loads, we invoke our getRepoIssues method and pass in 'facebook/react' as the repo name\n  // This only runs once because of our empty dependency array.\n  // useEffect(() => {\n  //   getPlaces();\n  // }, []);\n\n  React.useEffect(() => {\n    fetch(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities?limit=10\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"wft-geo-db.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"9610a05b5amshd976184d69c9411p1b38bdjsn299a5e3639b6\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(res => {\n      console.log(res);\n\n      for (let i = 0; i < res.data.length; i++) {\n        setPlaces([...places, res.data[i].city]);\n      }\n    }).catch(err => {\n      console.error(err);\n    });\n  }, []); // Helper function that preforms an API request and sets the `issues` array to a list of issues from GitHub\n  // const getPlaces = () => {\n  //   setPlaces(['Vegas', 'Istanbul', 'Venice']);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"GitHub issues for 'facebook/react'\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-primary\",\n      children: [\"Stored in state variable \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"issues\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui grid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-11\",\n          children: /*#__PURE__*/_jsxDEV(PlaceList, {\n            places: places\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Ez2sxHqHwXplpokbasymv65s8jQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/David/Documents/other-gt-work/Homework/proj-3/proj-3/client/src/App.js"],"names":["React","useState","useEffect","PlaceList","App","places","setPlaces","fetch","then","response","json","res","console","log","i","data","length","city","catch","err","error"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC,CAFa,CAIb;AACA;AACA;AACA;AACA;;AAEAD,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpBK,IAAAA,KAAK,CAAC,0DAAD,EAA6D;AAClE,gBAAU,KADwD;AAElE,iBAAW;AACT,2BAAmB,2BADV;AAET,0BAAkB;AAFT;AAFuD,KAA7D,CAAL,CAODC,IAPC,CAOIC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KATC,EAUDF,IAVC,CAUIG,GAAG,IAAI;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AAEA,WAAI,IAAIG,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,GAAG,CAACI,IAAJ,CAASC,MAAxB,EAAgCF,CAAC,EAAjC,EAAoC;AAClCR,QAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYM,GAAG,CAACI,IAAJ,CAASD,CAAT,EAAYG,IAAxB,CAAD,CAAT;AACD;AACF,KAhBC,EAiBDC,KAjBC,CAiBKC,GAAG,IAAI;AACZP,MAAAA,OAAO,CAACQ,KAAR,CAAcD,GAAd;AACD,KAnBC;AAoBD,GArBD,EAqBE,EArBF,EAVa,CAiCb;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,SAAS,EAAC,cAAhB;AAAA,2DAC2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD3B;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,iCACE,QAAC,SAAD;AAAW,YAAA,MAAM,EAAEd;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAtDQD,G;;KAAAA,G;AAwDT,eAAeA,GAAf","sourcesContent":["// We import useState and useEffect in our component\nimport React, { useState, useEffect } from 'react';\nimport PlaceList from './components/PlaceList';\n\nfunction App() {\n  // We declare a state variable that is an array called `issues` and a function to update it.\n  const [places, setPlaces] = useState([]);\n\n  // When the page loads, we invoke our getRepoIssues method and pass in 'facebook/react' as the repo name\n  // This only runs once because of our empty dependency array.\n  // useEffect(() => {\n  //   getPlaces();\n  // }, []);\n\n  React.useEffect(() => {\n    fetch(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities?limit=10\", {\n    \"method\": \"GET\",\n    \"headers\": {\n      \"x-rapidapi-host\": \"wft-geo-db.p.rapidapi.com\",\n      \"x-rapidapi-key\": \"9610a05b5amshd976184d69c9411p1b38bdjsn299a5e3639b6\"\n    }\n  })\n  .then(response => {\n    return response.json();\n  })\n  .then(res => {\n    console.log(res);\n    \n    for(let i=0; i<res.data.length; i++){\n      setPlaces([...places, res.data[i].city]);\n    }\n  })\n  .catch(err => {\n    console.error(err);\n  });\n  },[]);\n\n  // Helper function that preforms an API request and sets the `issues` array to a list of issues from GitHub\n  // const getPlaces = () => {\n  //   setPlaces(['Vegas', 'Istanbul', 'Venice']);\n  // };\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"header\">GitHub issues for 'facebook/react'</h2>\n      <span className=\"text-primary\">\n        Stored in state variable <code>issues</code>\n      </span>\n      <hr></hr>\n      <div className=\"ui grid\">\n        <div className=\"row\">\n          <div className=\"col-11\">\n            <PlaceList places={places} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}